{"/home/travis/build/npmtest/node-npmtest-electron/test.js":"/* istanbul instrument in package npmtest_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron/lib.npmtest_electron.js":"/* istanbul instrument in package npmtest_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron.__dirname + '/lib.npmtest_electron.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron/node_modules/electron/index.js":"var fs = require('fs')\nvar path = require('path')\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again')\n}\n","/home/travis/build/npmtest/node-npmtest-electron/node_modules/electron/cli.js":"#!/usr/bin/env node\n\nvar electron = require('./')\n\nvar proc = require('child_process')\n\nvar child = proc.spawn(electron, process.argv.slice(2), {stdio: 'inherit'})\nchild.on('close', function (code) {\n  process.exit(code)\n})\n","/home/travis/build/npmtest/node-npmtest-electron/node_modules/electron/install.js":"#!/usr/bin/env node\n\n// maintainer note - x.y.z-ab version in package.json -> x.y.z\nvar version = require('./package').version.replace(/-.*/, '')\n\nvar fs = require('fs')\nvar os = require('os')\nvar path = require('path')\nvar extract = require('extract-zip')\nvar download = require('electron-download')\n\nvar installedVersion = null\ntry {\n  installedVersion = fs.readFileSync(path.join(__dirname, 'dist', 'version'), 'utf-8').replace(/^v/, '')\n} catch (ignored) {\n  // do nothing\n}\n\nvar platformPath = getPlatformPath()\n\nif (installedVersion === version && fs.existsSync(path.join(__dirname, platformPath))) {\n  process.exit(0)\n}\n\n// downloads if not cached\ndownload({\n  cache: process.env.electron_config_cache,\n  version: version,\n  platform: process.env.npm_config_platform,\n  arch: process.env.npm_config_arch,\n  strictSSL: process.env.npm_config_strict_ssl === 'true',\n  quiet: ['info', 'verbose', 'silly', 'http'].indexOf(process.env.npm_config_loglevel) === -1\n}, extractFile)\n\n// unzips and makes path.txt point at the correct executable\nfunction extractFile (err, zipPath) {\n  if (err) return onerror(err)\n  extract(zipPath, {dir: path.join(__dirname, 'dist')}, function (err) {\n    if (err) return onerror(err)\n    fs.writeFile(path.join(__dirname, 'path.txt'), platformPath, function (err) {\n      if (err) return onerror(err)\n    })\n  })\n}\n\nfunction onerror (err) {\n  throw err\n}\n\nfunction getPlatformPath () {\n  var platform = process.env.npm_config_platform || os.platform()\n\n  switch (platform) {\n    case 'darwin':\n      return 'dist/Electron.app/Contents/MacOS/Electron'\n    case 'freebsd':\n    case 'linux':\n      return 'dist/electron'\n    case 'win32':\n      return 'dist/electron.exe'\n    default:\n      throw new Error('Electron builds are not available on platform: ' + platform)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron/node_modules/electron-download/build/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = require('debug')('electron-download');\nvar fs = require('fs-extra');\nvar homePath = require('home-path');\nvar rc = require('rc');\nvar nugget = require('nugget');\nvar os = require('os');\nvar path = require('path');\nvar pathExists = require('path-exists');\nvar semver = require('semver');\nvar sumchecker = require('sumchecker');\n\nvar ElectronDownloader = function () {\n  function ElectronDownloader(opts) {\n    _classCallCheck(this, ElectronDownloader);\n\n    this.opts = opts;\n\n    this.npmrc = {};\n    try {\n      rc('npm', this.npmrc);\n    } catch (error) {\n      console.error('Error reading npm configuration: ' + error.message);\n    }\n  }\n\n  _createClass(ElectronDownloader, [{\n    key: 'checkForCachedChecksum',\n    value: function checkForCachedChecksum(cb) {\n      var _this = this;\n\n      pathExists(this.cachedChecksum).then(function (exists) {\n        if (exists && !_this.force) {\n          _this.verifyChecksum(cb);\n        } else if (_this.tmpdir) {\n          _this.downloadChecksum(cb);\n        } else {\n          _this.createTempDir(cb, function (callback) {\n            _this.downloadChecksum(callback);\n          });\n        }\n      });\n    }\n  }, {\n    key: 'checkForCachedZip',\n    value: function checkForCachedZip(cb) {\n      var _this2 = this;\n\n      pathExists(this.cachedZip).then(function (exists) {\n        if (exists && !_this2.force) {\n          debug('zip exists', _this2.cachedZip);\n          _this2.checkIfZipNeedsVerifying(cb);\n        } else {\n          _this2.ensureCacheDir(cb);\n        }\n      });\n    }\n  }, {\n    key: 'checkIfZipNeedsVerifying',\n    value: function checkIfZipNeedsVerifying(cb) {\n      if (this.verifyChecksumNeeded) {\n        debug('Verifying zip with checksum');\n        return this.checkForCachedChecksum(cb);\n      }\n      return cb(null, this.cachedZip);\n    }\n  }, {\n    key: 'createCacheDir',\n    value: function createCacheDir(cb) {\n      var _this3 = this;\n\n      fs.mkdirs(this.cache, function (err) {\n        if (err) {\n          var _ret = function () {\n            if (err.code !== 'EACCES') return {\n                v: cb(err)\n              };\n            // try local folder if homedir is off limits (e.g. some linuxes return '/' as homedir)\n            var localCache = path.resolve('./.electron');\n            return {\n              v: fs.mkdirs(localCache, function (err) {\n                if (err) return cb(err);\n                cb(null, localCache);\n              })\n            };\n          }();\n\n          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n        }\n        cb(null, _this3.cache);\n      });\n    }\n  }, {\n    key: 'createTempDir',\n    value: function createTempDir(cb, onSuccess) {\n      this.tmpdir = path.join(os.tmpdir(), 'electron-tmp-download-' + process.pid + '-' + Date.now());\n      fs.mkdirs(this.tmpdir, function (err) {\n        if (err) return cb(err);\n        onSuccess(cb);\n      });\n    }\n  }, {\n    key: 'downloadChecksum',\n    value: function downloadChecksum(cb) {\n      this.downloadFile(this.checksumUrl, this.checksumFilename, this.cachedChecksum, cb, this.verifyChecksum.bind(this));\n    }\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(url, filename, cacheFilename, cb, onSuccess) {\n      var _this4 = this;\n\n      debug('downloading', url, 'to', this.tmpdir);\n      var nuggetOpts = {\n        target: filename,\n        dir: this.tmpdir,\n        resume: true,\n        quiet: this.quiet,\n        strictSSL: this.strictSSL,\n        proxy: this.proxy\n      };\n      nugget(url, nuggetOpts, function (errors) {\n        if (errors) {\n          // nugget returns an array of errors but we only need 1st because we only have 1 url\n          return _this4.handleDownloadError(cb, errors[0]);\n        }\n\n        _this4.moveFileToCache(filename, cacheFilename, cb, onSuccess);\n      });\n    }\n  }, {\n    key: 'downloadIfNotCached',\n    value: function downloadIfNotCached(cb) {\n      if (!this.version) return cb(new Error('must specify version'));\n      debug('info', { cache: this.cache, filename: this.filename, url: this.url });\n      this.checkForCachedZip(cb);\n    }\n  }, {\n    key: 'downloadZip',\n    value: function downloadZip(cb) {\n      this.downloadFile(this.url, this.filename, this.cachedZip, cb, this.checkIfZipNeedsVerifying.bind(this));\n    }\n  }, {\n    key: 'ensureCacheDir',\n    value: function ensureCacheDir(cb) {\n      var _this5 = this;\n\n      debug('creating cache/tmp dirs');\n      this.createCacheDir(function (err, actualCache) {\n        if (err) return cb(err);\n        _this5.opts.cache = actualCache; // in case cache dir changed\n        _this5.createTempDir(cb, _this5.downloadZip.bind(_this5));\n      });\n    }\n  }, {\n    key: 'handleDownloadError',\n    value: function handleDownloadError(cb, error) {\n      if (error.message.indexOf('404') === -1) return cb(error);\n      if (this.symbols) {\n        error.message = 'Failed to find Electron symbols v' + this.version + ' for ' + this.platform + '-' + this.arch + ' at ' + this.url;\n      } else {\n        error.message = 'Failed to find Electron v' + this.version + ' for ' + this.platform + '-' + this.arch + ' at ' + this.url;\n      }\n\n      return cb(error);\n    }\n  }, {\n    key: 'moveFileToCache',\n    value: function moveFileToCache(filename, target, cb, onSuccess) {\n      var _this6 = this;\n\n      debug('moving', filename, 'from', this.tmpdir, 'to', target);\n      fs.unlink(target, function (err) {\n        if (err != null && err.code !== 'ENOENT') return cb(err);\n        fs.move(path.join(_this6.tmpdir, filename), target, function (err) {\n          if (err) return cb(err);\n          onSuccess(cb);\n        });\n      });\n    }\n  }, {\n    key: 'verifyChecksum',\n    value: function verifyChecksum(cb) {\n      var _this7 = this;\n\n      var options = {};\n      if (semver.lt(this.version, '1.3.5')) {\n        options.defaultTextEncoding = 'binary';\n      }\n      var checker = new sumchecker.ChecksumValidator('sha256', this.cachedChecksum, options);\n      checker.validate(this.cache, this.filename).then(function () {\n        cb(null, _this7.cachedZip);\n      }, function (err) {\n        fs.unlink(_this7.cachedZip, function (fsErr) {\n          if (fsErr) return cb(fsErr);\n          cb(err);\n        });\n      });\n    }\n  }, {\n    key: 'baseUrl',\n    get: function get() {\n      return process.env.NPM_CONFIG_ELECTRON_MIRROR || process.env.npm_config_electron_mirror || process.env.ELECTRON_MIRROR || this.opts.mirror || 'https://github.com/electron/electron/releases/download/v';\n    }\n  }, {\n    key: 'middleUrl',\n    get: function get() {\n      return process.env.ELECTRON_CUSTOM_DIR || this.opts.customDir || this.version;\n    }\n  }, {\n    key: 'urlSuffix',\n    get: function get() {\n      return process.env.ELECTRON_CUSTOM_FILENAME || this.opts.customFilename || this.filename;\n    }\n  }, {\n    key: 'arch',\n    get: function get() {\n      return this.opts.arch || os.arch();\n    }\n  }, {\n    key: 'cache',\n    get: function get() {\n      return this.opts.cache || path.join(homePath(), './.electron');\n    }\n  }, {\n    key: 'cachedChecksum',\n    get: function get() {\n      return path.join(this.cache, this.checksumFilename + '-' + this.version);\n    }\n  }, {\n    key: 'cachedZip',\n    get: function get() {\n      return path.join(this.cache, this.filename);\n    }\n  }, {\n    key: 'checksumFilename',\n    get: function get() {\n      return 'SHASUMS256.txt';\n    }\n  }, {\n    key: 'checksumUrl',\n    get: function get() {\n      return '' + this.baseUrl + this.middleUrl + '/' + this.checksumFilename;\n    }\n  }, {\n    key: 'filename',\n    get: function get() {\n      var type = this.platform + '-' + this.arch;\n      var suffix = 'v' + this.version + '-' + type;\n\n      if (this.chromedriver) {\n        return 'chromedriver-v2.21-' + type + '.zip';\n      } else if (this.mksnapshot) {\n        return 'mksnapshot-' + suffix + '.zip';\n      } else if (this.ffmpeg) {\n        return 'ffmpeg-' + suffix + '.zip';\n      } else if (this.symbols) {\n        return 'electron-' + suffix + '-symbols.zip';\n      } else if (this.dsym) {\n        return 'electron-' + suffix + '-dsym.zip';\n      } else {\n        return 'electron-' + suffix + '.zip';\n      }\n    }\n  }, {\n    key: 'platform',\n    get: function get() {\n      return this.opts.platform || os.platform();\n    }\n  }, {\n    key: 'proxy',\n    get: function get() {\n      var proxy = void 0;\n      if (this.npmrc && this.npmrc.proxy) proxy = this.npmrc.proxy;\n      if (this.npmrc && this.npmrc['https-proxy']) proxy = this.npmrc['https-proxy'];\n\n      return proxy;\n    }\n  }, {\n    key: 'quiet',\n    get: function get() {\n      return this.opts.quiet || process.stdout.rows < 1;\n    }\n  }, {\n    key: 'strictSSL',\n    get: function get() {\n      var strictSSL = true;\n      if (this.opts.strictSSL === false || this.npmrc['strict-ssl'] === false) {\n        strictSSL = false;\n      }\n\n      return strictSSL;\n    }\n  }, {\n    key: 'force',\n    get: function get() {\n      return this.opts.force || false;\n    }\n  }, {\n    key: 'symbols',\n    get: function get() {\n      return this.opts.symbols || false;\n    }\n  }, {\n    key: 'dsym',\n    get: function get() {\n      return this.opts.dsym || false;\n    }\n  }, {\n    key: 'chromedriver',\n    get: function get() {\n      return this.opts.chromedriver || false;\n    }\n  }, {\n    key: 'mksnapshot',\n    get: function get() {\n      return this.opts.mksnapshot || false;\n    }\n  }, {\n    key: 'ffmpeg',\n    get: function get() {\n      return this.opts.ffmpeg || false;\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return '' + this.baseUrl + this.middleUrl + '/' + this.urlSuffix;\n    }\n  }, {\n    key: 'verifyChecksumNeeded',\n    get: function get() {\n      return semver.gte(this.version, '1.3.2');\n    }\n  }, {\n    key: 'version',\n    get: function get() {\n      return this.opts.version;\n    }\n  }]);\n\n  return ElectronDownloader;\n}();\n\nmodule.exports = function download(opts, cb) {\n  var downloader = new ElectronDownloader(opts);\n  downloader.downloadIfNotCached(cb);\n};"}